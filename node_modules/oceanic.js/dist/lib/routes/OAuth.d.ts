/** @module Routes/OAuth */
import type { AuthorizationInformation, ClientCredentialsTokenOptions, ClientCredentialsTokenResponse, Connection, ExchangeCodeOptions, ExchangeCodeResponse, RefreshTokenOptions, RefreshTokenResponse, RevokeTokenOptions, GetCurrentGuildsOptions, RoleConnectionMetadata, RoleConnection } from "../types/oauth";
import OAuthApplication from "../structures/OAuthApplication";
import Member from "../structures/Member";
import type RESTManager from "../rest/RESTManager";
import OAuthHelper from "../rest/OAuthHelper";
import OAuthGuild from "../structures/OAuthGuild";
import ExtendedUser from "../structures/ExtendedUser";
import type { UpdateUserApplicationRoleConnectionOptions } from "../types";
/** Various methods for interacting with oauth. */
export default class OAuth {
    #private;
    constructor(manager: RESTManager);
    /**
     * Get an access token for the application owner. If the application is owned by a team, this is restricted to `identify` & `applications.commands.update`.
     * @param options The options to for the client credentials grant.
     */
    clientCredentialsGrant(options: ClientCredentialsTokenOptions): Promise<ClientCredentialsTokenResponse>;
    /**
     * Exchange a code for an access token.
     * @param options The options for exchanging the code.
     */
    exchangeCode(options: ExchangeCodeOptions): Promise<ExchangeCodeResponse>;
    /**
     * Get the current OAuth2 application's information.
     */
    getApplication(): Promise<OAuthApplication>;
    /**
     * Get information about the current authorization.
     *
     * Note: OAuth only. Bots cannot use this.
     */
    getCurrentAuthorizationInformation(): Promise<AuthorizationInformation>;
    /**
     * Get the connections of the currently authenticated user.
     *
     * Note: Requires the `connections` scope when using oauth.
     */
    getCurrentConnections(): Promise<Array<Connection>>;
    /**
     * Get the guild member information about the currently authenticated user.
     *
     * Note: OAuth only. Requires the `guilds.members.read` scope. Bots cannot use this.
     * @param guild the ID of the guild
     */
    getCurrentGuildMember(guild: string): Promise<Member>;
    /**
     * Get the currently authenticated user's guilds. Note these are missing several properties gateway guilds have.
     * @param options The options for getting the current user's guilds.
     */
    getCurrentGuilds(options?: GetCurrentGuildsOptions): Promise<Array<OAuthGuild>>;
    /**
     * Get the currently authenticated user's information.
     *
     * Note: This does not touch the client's cache in any way.
     */
    getCurrentUser(): Promise<ExtendedUser>;
    /** Get a helper instance that can be used with a specific bearer token. */
    getHelper(token: string): OAuthHelper;
    /**
     * Get an application's role connection metadata records.
     * @param application The ID of the application.
     */
    getRoleConnectionsMetadata(applicationID: string): Promise<Array<RoleConnectionMetadata>>;
    /**
     * Get the authenticated user's role connection object for an application. This requires the `role_connections.write` scope.
     * @param applicationID The ID of the application.
     */
    getUserRoleConnection(applicationID: string): Promise<RoleConnection>;
    /**
     * Refresh an existing access token.
     * @param options The options for refreshing the token.
     */
    refreshToken(options: RefreshTokenOptions): Promise<RefreshTokenResponse>;
    /**
     * Revoke an access token.
     * @param options The options for revoking the token.
     */
    revokeToken(options: RevokeTokenOptions): Promise<void>;
    /**
     * Update an application's role connections metadata.
     * @param application The ID of the application.
     * @param metadata The metadata records.
     */
    updateRoleConnectionsMetadata(applicationID: string, metadata: Array<RoleConnectionMetadata>): Promise<Array<RoleConnectionMetadata>>;
    /**
     * Update the authenticated user's role connection object for an application. This requires the `role_connections.write` scope.
     * @param applicationID The ID of the application.
     * @param data The metadata to update.
     */
    updateUserRoleConnection(applicationID: string, data: UpdateUserApplicationRoleConnectionOptions): Promise<RoleConnection>;
}
